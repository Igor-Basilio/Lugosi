
options {
  STATIC = false;
  DEBUG_LOOKAHEAD = false;
}

PARSER_BEGIN(Lugosi)

    package parser;
    import java.io.*;
    import syntacticTree.*;
    import java.util.ArrayList;

    public class Lugosi {

      final static String Version = "Lugosi Compiler / Transpiler 1.0 - 2024";

      // String com a tradução de lug -> js.
      static String target = 
          "const readline = require('readline');\n\n"
         +"const rl = readline.createInterface({\n" 
         +"  input: process.stdin,\n"
         +"  output: process.stdout\n"
         +"});\n\n"
         +"function readIO(prompt)\n{"
         +"\n  return new Promise((resolve) => {\n"
         +"    rl.question(prompt, resolve);\n"
         +"  });\n"
         +"}\n\n"
          ;

      public static void main(String args[]) throws ParseException,IOException {

         Lugosi analisador = new Lugosi(new FileInputStream(args[0]));
         ProgramNode ast = analisador.Lugosi();

         // System.out.println(ast); 
         // Não é necessário utilizar uma ast
         // porque o nível de abstração entre Lugosi e 
         // Javascript é similar.
         // Na verdade não seria necessário para nenhuma
         // linguagem de alto nível, já que os statements 
         // são bem parecidos 
         // Ex : let int x; ( lug ) -> let x; ( js ) -> int x; ( c )
         // Ainda é mais fácil já que javascript é uma 
         // linguagem dinamicamente tipada.

         PrintWriter out = null;
	try {
	    out = new PrintWriter(args[0] + ".js");
	    out.println(target);
	} catch (FileNotFoundException e) {
	    e.printStackTrace();
	} finally {
	    if (out != null) {
		out.close();
	    }
	}


      }

    }

PARSER_END(Lugosi)

// # Antes de token, para fazer uso de 
// expressões regex como macro para ficar mais
// fácil de ler.

SKIP : { <SKIP_WS: <WHITE_SPACE>> }

TOKEN :
{
     <#ALPHA: ["a"-"z","A"-"Z"]>
    |<#DIGIT: ["0"-"9"] >
    |<#ALPHA_NUMERIC: <ALPHA>|<DIGIT> >
    |<#SPECIAL_CHAR: [",","!"]>
    |<#NEWLINE: ["\n","\r"]|("\r\n") > 
    |<#WHITE_SPACE:  [" ","\t"]|<NEWLINE> > 
}

TOKEN :
{
      <MAIN: "main">
    | <ACHAVES: "{">
    | <FCHAVES: "}">
    | <VOID: "void">
    | <LET: "let">
    | <FLOAT: "float">
    | <STRING: "string">
    | <INT: "int">
    | <SEMICOLON: ";">
    | <BOOLEAN: "bool">
    | <ATTRIB: ":=">

    | <APAREN: "(">
    | <FPAREN: ")">
    | <IF: "if">
    | <ELSE: "else">
    | <WHILE: "while">
    | <DO: "do">
    | <READIO: "readIO">
    | <RETURN: "return">
    | <PRINTIO: "printIO">

    | <TRUE: "true">
    | <FALSE: "false">
    | <PLUS: "+">
    | <MINUS: "-">
    | <MULT: "*">
    | <DIV: "/">
    | <AND: "&&">
    | <OR: "||">
    | <LESSOP: "<">
    | <MOREOP: ">">
    | <LESSEQ: "<=">
    | <MOREEQ: ">=">
    | <EQUALS: "==">
    | <MODULO: "%">

    | <DEF: "def">
    | <COMMA: ",">
}

TOKEN :
{
     <NUM : (<DIGIT>)+("."(<DIGIT>)+)?("E"("-"|"+")?(<DIGIT>)+)?>
    |<ID: <ALPHA>(<ALPHA_NUMERIC>)* ("_"(<ALPHA_NUMERIC>)+)?>
    |<TEMPLATE_LITERAL: ["`"](~["`"])*["`"]>
    |<STRING_LITERAL: "\""(~["\n","\r","\""])*"\"" >
}

ProgramNode Lugosi ():
{ 
  Token eof = null;
  MainNode main = null;
  FunctionNode bf = null, af = null;
} 
{
  (bf = FUNC())? main = MAIN() (af = FUNC())? 
   eof = <EOF>
  { return new ProgramNode(eof, main, bf, af); } 
}

MainNode MAIN():
{
  Token main = null;
  VarDeclBase vd = null; 
  SeqCommandsNode sc = null;
  Token r_type = null;
}
{
  (r_type = <VOID>{ target+="async "; })
  (main = <MAIN>{target+="function main()\n";}) 
  (<ACHAVES>{target+="{\n";}) vd = VARDECL() sc = SEQCOMANDOS() 
  (<FCHAVES>{target+="}\n\nmain(); \n\n";})
  { return new MainNode(main, vd, sc, r_type); }
}

VarDeclBase VARDECL():
{
  VarDeclBase b = new VarDeclBase();
  VarDeclNode n;
}
{
  ( n = VARDECL_S() { b.decls.add(n); } )* 
  { return b; } 
}

VarDeclNode VARDECL_S():
{
   Token t = null, r = null; 
   ArrayList<Token> ids;
}
{
  (r = <LET>{ target += "   let ";}) t = TIPO() ids = LISTID() 
  (<SEMICOLON> { target +=";\n"; })
  { return new VarDeclNode(r, t, ids); }
}

ArrayList<Token> LISTID():
{
  Token id;
  ArrayList<Token> ids = new ArrayList<Token>();
}
{
  (id = <ID>{ target += id.image; ids.add(id); })
  ( LISTID_L(ids))
  { return ids; }
}

void LISTID_L(ArrayList<Token> ids):
{ Token id; }
{
    (
      (<COMMA> { target += ", "; }) 
      (id = <ID> { target += id.image; ids.add(id); })
    )*
}

Token TIPO():
{ Token t = null; }
{
    (t = <FLOAT> | t = <BOOLEAN> | t = <VOID> | t = <STRING> | t = <INT>)
    { return t; }
}

SeqCommandsNode SEQCOMANDOS():
{ }
{
  { target += "\n"; }               // Before the rules.
  (COMANDO() { target +="\n";} )*   // At every command.
  { target+="\n"; return null; }    // After the rules.
}

void COMANDO() : {Token id; Token attr;}
{
    LOOKAHEAD(3) ( (id=<ID>{target+="\n   try {\n      "+id.image;})
            (<ATTRIB>{target+=" = ";})
            (<READIO>{target+="parseInt( await readIO(\"\") );\n"
             +"   }catch(err)\n"
             +"   {\n"
             +"      console.log(\"Erro: \", err);\n"
             +"   }finally{\n"
             +"      rl.close();\n"
             +"   }\n";})
            <APAREN> <FPAREN> <SEMICOLON> )
  |
    LOOKAHEAD(2) 
    ((id=<ID>{target+="   "+id.image;})
    (attr=<ATTRIB>{target+=" = ";})
     EXP() 
    (<SEMICOLON>{ target+=";";}) )
  | 
    LOOKAHEAD(2) 
    ( (id=<ID>{target+="   "+id.image;}) (<APAREN>{target+="(";})
      LISTAEXP() (<FPAREN>{target+=")";}) (<SEMICOLON>{target+=";";}) )

  | ( (<IF>{target+="   if(";})
       EXP() (<ACHAVES>{target+="){\n";}) SEQCOMANDOS() 
      (<FCHAVES>{target+="   }";}) 
      (<SEMICOLON>{target+=";";}) )

  |  ( (<WHILE>{target+="   while ";}) (<APAREN>{target+="(";})
       EXP() (<FPAREN>{target+=")\n";})
       <DO> (<ACHAVES>{target+="   {";}) 
       SEQCOMANDOS() (<FCHAVES>{target+="   }";}) 
       (<SEMICOLON>{target+=";";}) )

  | ( (<RETURN>{target+="   return ";}) EXP() (<SEMICOLON>{target+=";";}) )
  | ( (<PRINTIO>{target+="   console.log(";}) EXP() (<SEMICOLON>{target+=");";}) )
}

void EXP() : {}
{
    (
        <APAREN> { target += "("; } EXP() <FPAREN> { target += ")"; }
    |
        (FATOR(){target+=" ";})
    )
    (
        OP() 
        (
            <APAREN> { target += "("; } EXP() <FPAREN> { target += ")"; }
        |
            (FATOR(){target+=" ";})
        )
    )*
}

void FATOR() : {Token id; Token num; Token str_literal;}
{
      LOOKAHEAD(2) (id=<ID>{target+=id.image;})
      (<APAREN>{target+="(";})
      LISTAEXP()
      (<FPAREN>{target+=")";}) 
    
    | (id=<ID>{target+=id.image;}) 

    | (num=<NUM>{target+=num.image;})
    | (str_literal=<STRING_LITERAL>{target+=str_literal.image;})
    | (<TRUE>{target+="true";})
    | (<FALSE>{target+="false";})
}

void OP():
{}
{
    (<PLUS>{target+="+ ";})
   |(<MINUS>{target+="- ";})
   |(<MULT>{target+="* ";})
   |(<DIV>{target+="/ ";})
   |(<AND>{target+="&& ";})
   |(<OR>{target+="|| ";})
   |(<LESSOP>{target+="< ";})
   |(<MOREOP>{target+="> ";})
   |(<EQUALS>{target+="== ";})
   |(<LESSEQ>{target+="<= ";})
   |(<MOREEQ>{target+=">= ";})
   |(<MODULO>{target+="% ";})
}

void LISTAEXP():
{}
{
   EXP() LISTAEXP_L()
}

void LISTAEXP_L():
{}
{
  ((<COMMA>{target+=",";}) EXP())*
}

void LISTAARG(): {Token var_id;}
{
   TIPO()
   (var_id=<ID> { target += var_id.image; })
   LISTAARG_L()
}

void LISTAARG_L(): {Token rvar_id;}
{
  (
    (<COMMA> { target += ", "; })
    TIPO()
    (rvar_id=<ID> { target += rvar_id;})
  )*
}

FunctionNode FUNC(): {}
{
    FUNC_D() FUNC_L()
    { return null; }
}

void FUNC_L():
{}
{
    (FUNC_D())*
}

void FUNC_D() : {Token func_id;}
{
    (<DEF> { target += "function "; })
     TIPO() (func_id=<ID> { target += func_id.image; }) 
    (<APAREN> { target += "("; })
     LISTAARG()
    (<FPAREN> {target += ")\n";})
    (<ACHAVES> { target +="{\n";}) 
     VARDECL() 
     SEQCOMANDOS() 
    (<FCHAVES> { target += "}\n\n"; })
}

