/* Lugosi.java */
/* Generated By:JavaCC: Do not edit this line. Lugosi.java */
    package parser;
    import java.io.*;
    import syntacticTree.*;
    import java.util.ArrayList;

    public class Lugosi implements LugosiConstants {

      final static String Version = "Lugosi Compiler / Transpiler 1.0 - 2024";

      public static void main(String args[]) throws ParseException,IOException {

         Lugosi analisador = new Lugosi(new FileInputStream(args[0]));
         ProgramNode ast = analisador.Lugosi();
         System.out.println(ast);

      }

  final public ProgramNode Lugosi() throws ParseException {Token eof = null;
  MainNode main = null;
  FunctionNode bf = null, af = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEF:{
      bf = FUNC();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    main = MAIN();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEF:{
      af = FUNC();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    eof = jj_consume_token(0);
{if ("" != null) return new ProgramNode(eof, main, bf, af);}
    throw new Error("Missing return statement in function");
}

  final public MainNode MAIN() throws ParseException {Token main = null;
  VarDeclBase vd = null;
  SeqCommandsNode sc = null;
  Token r_type = null;
    r_type = jj_consume_token(VOID);
    main = jj_consume_token(MAIN);
    jj_consume_token(ACHAVES);
    vd = VARDECL();
    sc = SEQCOMANDOS();
    jj_consume_token(FCHAVES);
{if ("" != null) return new MainNode(main, vd, sc, r_type);}
    throw new Error("Missing return statement in function");
}

  final public VarDeclBase VARDECL() throws ParseException {VarDeclBase b = new VarDeclBase();
  VarDeclNode n;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LET:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      n = VARDECL_S();
b.decls.add(n);
    }
{if ("" != null) return b;}
    throw new Error("Missing return statement in function");
}

  final public VarDeclNode VARDECL_S() throws ParseException {Token t = null, r = null;
   ArrayList<Token> ids;
    r = jj_consume_token(LET);
    t = TIPO();
    ids = LISTID();
    jj_consume_token(SEMICOLON);
{if ("" != null) return new VarDeclNode(r, t, ids);}
    throw new Error("Missing return statement in function");
}

  final public ArrayList<Token> LISTID() throws ParseException {Token id;
  ArrayList<Token> ids = new ArrayList<Token>();
    id = jj_consume_token(ID);
ids.add(id);
    LISTID_L(ids);
{if ("" != null) return ids;}
    throw new Error("Missing return statement in function");
}

  final public void LISTID_L(ArrayList<Token> ids) throws ParseException {Token id;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      id = jj_consume_token(ID);
ids.add(id);
    }
}

  final public Token TIPO() throws ParseException {Token t = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FLOAT:{
      t = jj_consume_token(FLOAT);
      break;
      }
    case BOOLEAN:{
      t = jj_consume_token(BOOLEAN);
      break;
      }
    case VOID:{
      t = jj_consume_token(VOID);
      break;
      }
    case STRING:{
      t = jj_consume_token(STRING);
      break;
      }
    case INT:{
      t = jj_consume_token(INT);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  final public SeqCommandsNode SEQCOMANDOS() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case WHILE:
      case RETURN:
      case PRINTIO:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      COMANDO();
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
}

  final public void COMANDO() throws ParseException {
    if (jj_2_1(2)) {
      jj_consume_token(ID);
      jj_consume_token(ATTRIB);
      EXP();
      jj_consume_token(SEMICOLON);
    } else if (jj_2_2(2)) {
      jj_consume_token(ID);
      jj_consume_token(APAREN);
      LISTAEXP();
      jj_consume_token(FPAREN);
      jj_consume_token(SEMICOLON);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:{
        jj_consume_token(IF);
        EXP();
        jj_consume_token(ACHAVES);
        SEQCOMANDOS();
        jj_consume_token(FCHAVES);
        jj_consume_token(SEMICOLON);
        break;
        }
      case WHILE:{
        jj_consume_token(WHILE);
        jj_consume_token(APAREN);
        EXP();
        jj_consume_token(FPAREN);
        jj_consume_token(DO);
        jj_consume_token(ACHAVES);
        SEQCOMANDOS();
        jj_consume_token(FCHAVES);
        jj_consume_token(SEMICOLON);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        if (jj_2_3(3)) {
          jj_consume_token(ID);
          jj_consume_token(ATTRIB);
          jj_consume_token(READIO);
          jj_consume_token(APAREN);
          jj_consume_token(FPAREN);
          jj_consume_token(SEMICOLON);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case RETURN:{
            jj_consume_token(RETURN);
            EXP();
            jj_consume_token(SEMICOLON);
            break;
            }
          case PRINTIO:{
            jj_consume_token(PRINTIO);
            EXP();
            jj_consume_token(SEMICOLON);
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
}

  final public void EXP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case APAREN:{
      jj_consume_token(APAREN);
      FATOR();
      EXP_L();
      jj_consume_token(FPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:
      case MULT:
      case DIV:
      case AND:
      case OR:
      case LESSOP:
      case MOREOP:
      case EQUALS:{
        OP();
        EXP();
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      break;
      }
    case TRUE:
    case FALSE:
    case NUM:
    case ID:
    case STRING_LITERAL:{
      FATOR();
      EXP_L();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:
      case MULT:
      case DIV:
      case AND:
      case OR:
      case LESSOP:
      case MOREOP:
      case EQUALS:{
        OP();
        EXP();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void EXP_L() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:
      case MULT:
      case DIV:
      case AND:
      case OR:
      case LESSOP:
      case MOREOP:
      case EQUALS:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_4;
      }
      OP();
      FATOR();
    }
}

  final public void FATOR() throws ParseException {
    if (jj_2_4(2)) {
      jj_consume_token(ID);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        jj_consume_token(ID);
        jj_consume_token(APAREN);
        LISTAEXP();
        jj_consume_token(FPAREN);
        break;
        }
      case NUM:{
        jj_consume_token(NUM);
        break;
        }
      case STRING_LITERAL:{
        jj_consume_token(STRING_LITERAL);
        break;
        }
      case TRUE:{
        jj_consume_token(TRUE);
        break;
        }
      case FALSE:{
        jj_consume_token(FALSE);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void OP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:{
      jj_consume_token(PLUS);
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      break;
      }
    case MULT:{
      jj_consume_token(MULT);
      break;
      }
    case DIV:{
      jj_consume_token(DIV);
      break;
      }
    case AND:{
      jj_consume_token(AND);
      break;
      }
    case OR:{
      jj_consume_token(OR);
      break;
      }
    case LESSOP:{
      jj_consume_token(LESSOP);
      break;
      }
    case MOREOP:{
      jj_consume_token(MOREOP);
      break;
      }
    case EQUALS:{
      jj_consume_token(EQUALS);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void LISTAEXP() throws ParseException {
    EXP();
    LISTAEXP_L();
}

  final public void LISTAEXP_L() throws ParseException {
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      EXP();
    }
}

  final public void LISTAARG() throws ParseException {
    TIPO();
    jj_consume_token(ID);
    LISTAARG_L();
}

  final public void LISTAARG_L() throws ParseException {
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      TIPO();
      jj_consume_token(ID);
    }
}

  final public FunctionNode FUNC() throws ParseException {
    FUNC_D();
    FUNC_L();
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
}

  final public void FUNC_L() throws ParseException {
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEF:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      FUNC_D();
    }
}

  final public void FUNC_D() throws ParseException {
    jj_consume_token(DEF);
    TIPO();
    jj_consume_token(ID);
    jj_consume_token(APAREN);
    LISTAARG();
    jj_consume_token(FPAREN);
    jj_consume_token(ACHAVES);
    VARDECL();
    SEQCOMANDOS();
    jj_consume_token(FCHAVES);
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ATTRIB)) return true;
    if (jj_scan_token(READIO)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(APAREN)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ATTRIB)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public LugosiTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x0,0x1000,0x0,0x2e800,0xca00000,0xa00000,0xc000000,0xc0000000,0xc0000000,0x30080000,0xc0000000,0x30000000,0xc0000000,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x400,0x400,0x0,0x800,0x0,0x2000,0x0,0x0,0x13f,0x13f,0xb000,0x13f,0xb000,0x13f,0x800,0x800,0x400,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Lugosi(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Lugosi(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new LugosiTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Lugosi(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new LugosiTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new LugosiTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Lugosi(LugosiTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(LugosiTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[48];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 17; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 48; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 4; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

    }
